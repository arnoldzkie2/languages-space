generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// client area

model Client {
  id               String                  @id @default(uuid())
  profile_url      String?                 @db.Text
  profile_key      String?
  name             String?
  username         String                  @unique
  phone_number     String?
  email            String?
  gender           String?
  organization     String?
  password         String
  address          String?
  origin           String?
  note             String?                 @db.Text
  created_at       DateTime                @default(now())
  updated_at       DateTime                @updatedAt
  departments      Department[]
  orders           Order[]
  cards            ClientCard[]
  bookings         Booking[]
  agent            Agent?                  @relation(fields: [agentID], references: [id], onDelete: Cascade)
  agentID          String?
  booking_comments ClientBookingComments[]
  booking_request  BookingRequest[]

  @@index([agentID])
}

model ClientCard {
  id               String         @id @default(uuid())
  name             String
  price            Decimal
  balance          Int
  validity         String
  invoice          Boolean
  repeat_purchases Boolean
  online_renews    Boolean
  clientID         String
  cardID           String
  created_at       DateTime       @default(now())
  updated_at       DateTime       @updatedAt
  client           Client         @relation(fields: [clientID], references: [id], onDelete: Cascade)
  card             ClientCardList @relation(fields: [cardID], references: [id], onDelete: Cascade)

  @@index([clientID])
  @@index([cardID])
}

model ClientCardList {
  id                  String          @id @default(uuid())
  name                String
  sold                Int
  price               Decimal
  balance             Int
  validity            Int
  available           Boolean
  invoice             Boolean
  repeat_purchases    Boolean
  online_renews       Boolean
  productID           String
  productPriceID      String
  prepaid             Boolean         @default(true)
  created_at          DateTime        @default(now())
  updated_at          DateTime        @updatedAt
  supported_courses   Courses[]
  supported_suppliers SupplierPrice[]
  active              ClientCard[]
  departments         Department      @relation(fields: [departmentID], references: [id], onDelete: Cascade)
  departmentID        String

  @@index([departmentID])
}

//supplier area

model Supplier {
  id                String                    @id @default(uuid())
  profile_key       String?
  profile_url       String?
  name              String
  username          String                    @unique
  organization      String?
  phone_number      String?
  password          String
  email             String?
  address           String?
  gender            String?
  tags              Json?
  origin            String?
  note              String?                   @db.Text
  employment_status String?
  entry             DateTime?
  departure         DateTime?
  created_at        DateTime                  @default(now())
  updated_at        DateTime                  @updatedAt
  meeting_info      SupplierMeetingInfo[]
  schedule          SupplierSchedule[]
  supplier_price    SupplierPrice[]
  bookings          Booking[]
  departments       Department[]
  balance           SupplierBalance[]
  booking_request   BookingRequest[]
  booking_comments  SupplierBookingComments[]
}

model SupplierBalance {
  id              String                        @id @default(uuid())
  amount          Decimal
  currency        String
  payment_address String
  salary          Int?
  booking_rate    Int
  supplierID      String
  created_at      DateTime                      @default(now())
  updated_at      DateTime                      @updatedAt
  supplier        Supplier                      @relation(fields: [supplierID], references: [id], onDelete: Cascade)
  earnings        SupplierEarnings[]
  deductions      SupplierDeductions[]
  transactions    SupplierBalanceTransactions[]

  @@index([supplierID])
}

model SupplierBalanceTransactions {
  id                String          @id @default(uuid())
  amount            String
  status            String
  payment_address   String
  paid_by           String?
  operator          String
  created_at        DateTime        @default(now())
  updated_at        DateTime        @updatedAt
  balance           SupplierBalance @relation(fields: [supplierBalanceID], references: [id], onDelete: Cascade)
  supplierBalanceID String

  @@index([supplierBalanceID])
}

model SupplierEarnings {
  id                String          @id @default(uuid())
  name              String
  quantity          Int
  rate              Decimal
  amount            Decimal
  created_at        DateTime        @default(now())
  updated_at        DateTime        @updatedAt
  balance           SupplierBalance @relation(fields: [supplierBalanceID], references: [id], onDelete: Cascade)
  supplierBalanceID String

  @@index([supplierBalanceID])
}

model SupplierDeductions {
  id                String          @id @default(uuid())
  name              String
  quantity          Int
  rate              Decimal
  amount            Decimal
  created_at        DateTime        @default(now())
  updated_at        DateTime        @updatedAt
  balance           SupplierBalance @relation(fields: [supplierBalanceID], references: [id], onDelete: Cascade)
  supplierBalanceID String

  @@index([supplierBalanceID])
}

model SupplierMeetingInfo {
  id           String   @id @default(uuid())
  service      String
  meeting_code String
  supplierID   String
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
  supplier     Supplier @relation(fields: [supplierID], references: [id], onDelete: Cascade)

  @@index([supplierID])
}

model SupplierSchedule {
  id             String    @id @default(uuid())
  supplierID     String
  date           String
  time           String
  status         String
  clientUsername String?
  clientID       String?
  created_at     DateTime  @default(now())
  updated_at     DateTime  @updatedAt
  supplier       Supplier  @relation(fields: [supplierID], references: [id], onDelete: Cascade)
  booking        Booking[]

  @@index([supplierID])
}

model SupplierPrice {
  id         String         @id @default(uuid())
  price      Decimal
  supplierID String
  cardID     String
  created_at DateTime       @default(now())
  updated_at DateTime       @updatedAt
  supplier   Supplier       @relation(fields: [supplierID], references: [id], onDelete: Cascade)
  card       ClientCardList @relation(fields: [cardID], references: [id], onDelete: Cascade)

  @@index([supplierID])
  @@index([cardID])
}

model Courses {
  id              String           @id @default(uuid())
  name            String
  created_at      DateTime         @default(now())
  updated_at      DateTime         @updatedAt
  supported_cards ClientCardList[]
  booking         Booking[]
}

// booking area

model Booking {
  id                String                    @id @default(uuid())
  name              String
  operator          String
  status            String
  note              String?                   @db.Text
  supplier_rate     Decimal
  card_balance_cost Int
  supplierID        String
  clientID          String
  card_name         String
  clientCardID      String
  settlement        String
  price             Decimal
  client_quantity   Decimal
  supplier_quantity Decimal
  meeting_info      Json
  created_at        DateTime                  @default(now())
  updated_at        DateTime                  @updatedAt
  course            Courses                   @relation(fields: [courseID], references: [id], onDelete: Cascade)
  schedule          SupplierSchedule          @relation(fields: [scheduleID], references: [id], onDelete: Cascade)
  supplier          Supplier                  @relation(fields: [supplierID], references: [id], onDelete: Cascade)
  client            Client                    @relation(fields: [clientID], references: [id], onDelete: Cascade)
  department        Department                @relation(fields: [departmentID], references: [id], onDelete: Cascade)
  supplier_comment  SupplierBookingComments[]
  client_comment    ClientBookingComments[]
  courseID          String
  departmentID      String
  scheduleID        String

  @@index([supplierID])
  @@index([clientID])
  @@index([courseID])
  @@index([departmentID])
  @@index([scheduleID])
}

model BookingRequest {
  id                String     @id @default(uuid())
  name              String
  date              String
  time              String
  status            String
  clientCardID      String
  meetingInfoID     String
  card_balance_cost Int
  card_name         String
  courseID          String
  operator          String
  settlement        String
  client_quantity   Decimal
  supplier_quantity Decimal
  note              String?    @db.Text
  supplier          Supplier   @relation(fields: [supplierID], references: [id], onDelete: Cascade)
  client            Client     @relation(fields: [clientID], references: [id], onDelete: Cascade)
  department        Department @relation(fields: [departmentID], references: [id], onDelete: Cascade)
  supplierID        String
  clientID          String
  created_at        DateTime   @default(now())
  updated_at        DateTime   @updatedAt
  departmentID      String

  @@index([supplierID])
  @@index([clientID])
  @@index([departmentID])
}

model Reminders {
  id                String      @id @default(uuid())
  name              String
  operator          String
  status            String
  note              String?     @db.Text
  supplierID        String?
  clientID          String?
  departmentID      String?
  card_name         String?
  settlement        String?
  clientCardID      String?
  courseID          String?
  scheduleID        String?
  price             Int?
  client_quantity   Decimal
  supplier_quantity Decimal
  meeting_info      Json?
  department        Department? @relation(fields: [departmentID], references: [id], onDelete: Cascade)
  created_at        DateTime    @default(now())
  updated_at        DateTime    @updatedAt

  @@index([departmentID])
}

model ClientBookingComments {
  id         String   @id @default(uuid())
  rate       Int
  message    String   @db.Text
  booking    Booking  @relation(fields: [bookingID], references: [id])
  client     Client   @relation(fields: [clientID], references: [id])
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  bookingID  String
  clientID   String

  @@index([bookingID])
  @@index([clientID])
}

model SupplierBookingComments {
  id           String   @id @default(uuid())
  rate         Int
  client_level String
  book_name    String
  book_page    String
  vocabulary   Json
  sentences    String   @db.Text
  message      String   @db.Text
  homework     String?  @db.Text
  supplierID   String
  bookingID    String
  supplier     Supplier @relation(fields: [supplierID], references: [id], onDelete: Cascade)
  booking      Booking  @relation(fields: [bookingID], references: [id], onDelete: Cascade)
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt

  @@index([supplierID])
  @@index([bookingID])
}

model BookingCommentTemplates {
  id         String   @id @default(uuid())
  message    String   @db.Text
  user       String
  gender     String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

// agent area

model Agent {
  id           String         @id @default(uuid())
  profile_url  String?
  profile_key  String?
  name         String?
  username     String         @unique
  password     String
  organization String?
  phone_number String?
  email        String?
  address      String?
  gender       String?
  origin       String?
  note         String?        @db.Text
  created_at   DateTime       @default(now())
  updated_at   DateTime       @updatedAt
  departments  Department[]
  balance      AgentBalance[]
  invites      Client[]
}

model AgentBalance {
  id              String                     @id @default(uuid())
  amount          Decimal
  currency        String
  payment_address String
  commission_rate Int
  commission_type String
  created_at      DateTime                   @default(now())
  updated_at      DateTime                   @updatedAt
  agentID         String
  agent           Agent                      @relation(fields: [agentID], references: [id], onDelete: Cascade)
  earnings        AgentEarnings[]
  deductions      AgentDeductions[]
  transactions    AgentBalanceTransactions[]

  @@index([agentID])
}

model AgentEarnings {
  id             String       @id @default(uuid())
  name           String
  quantity       Int
  rate           Decimal
  amount         Decimal
  created_at     DateTime     @default(now())
  updated_at     DateTime     @updatedAt
  balance        AgentBalance @relation(fields: [agentBalanceID], references: [id], onDelete: Cascade)
  agentBalanceID String

  @@index([agentBalanceID])
}

model AgentDeductions {
  id             String       @id @default(uuid())
  name           String
  quantity       Int
  rate           Decimal
  amount         Decimal
  created_at     DateTime     @default(now())
  updated_at     DateTime     @updatedAt
  balance        AgentBalance @relation(fields: [agentBalanceID], references: [id], onDelete: Cascade)
  agentBalanceID String

  @@index([agentBalanceID])
}

model AgentBalanceTransactions {
  id              String       @id @default(uuid())
  amount          String
  status          String
  payment_address String
  paid_by         String?
  operator        String
  created_at      DateTime     @default(now())
  updated_at      DateTime     @updatedAt
  balance         AgentBalance @relation(fields: [agentBalanceID], references: [id], onDelete: Cascade)
  agentBalanceID  String

  @@index([agentBalanceID])
}

// order area

model Order {
  id             String     @id @unique @default(uuid())
  quantity       Int
  price          Decimal
  name           String
  operator       String
  status         String
  note           String?    @db.Text
  invoice_number String?
  express_number String?
  cardID         String
  created_at     DateTime   @default(now())
  updated_at     DateTime   @updatedAt
  client         Client     @relation(fields: [clientID], references: [id], onDelete: Cascade)
  clientID       String
  departments    Department @relation(fields: [departmentID], references: [id], onDelete: Cascade)
  departmentID   String

  @@index([clientID])
  @@index([departmentID])
}

// admin area

model Admin {
  id                    String                 @id @default(uuid())
  name                  String
  username              String                 @unique
  email                 String?
  phone_number          String?
  password              String
  origin                String?
  organization          String?
  note                  String?                @db.Text
  gender                String?
  address               String?
  profile_key           String?
  profile_url           String?
  created_at            DateTime               @default(now())
  updated_at            DateTime               @updatedAt
  departments           Department[]
  department_permission DepartmentPermission[]
}

model DepartmentPermission {
  //we make this model so admin can have different permission in each department
  id                String            @id @default(uuid())
  admin             Admin             @relation(fields: [adminID], references: [id], onDelete: Cascade)
  adminID           String
  department        Department        @relation(fields: [departmentID], references: [id], onDelete: Cascade)
  departmentID      String
  admin_permissions AdminPermission[]
  created_at        DateTime          @default(now())
  updated_at        DateTime          @updatedAt

  @@index([adminID])
  @@index([departmentID])
}

model AdminPermission {
  id String @id @default(uuid())

  //client permissions
  view_client         Boolean @default(false)
  create_client       Boolean @default(false)
  update_client       Boolean @default(false)
  delete_client       Boolean @default(false)
  view_client_cards   Boolean @default(false)
  update_client_cards Boolean @default(false)
  delete_client_cards Boolean @default(false)

  //card permissions
  view_cards   Boolean @default(false)
  create_cards Boolean @default(false)
  update_cards Boolean @default(false)
  delete_cards Boolean @default(false)
  bind_cards   Boolean @default(false)
  renew_cards  Boolean @default(false)

  //supplier permissions
  view_supplier                   Boolean @default(false)
  create_supplier                 Boolean @default(false)
  update_supplier                 Boolean @default(false)
  delete_supplier                 Boolean @default(false)
  send_supplier_payslip           Boolean @default(false)
  view_supplier_payment_request   Boolean @default(false)
  update_supplier_payment_request Boolean @default(false)
  receive_cancel_request_email    Boolean @default(false)

  //suppier earnings
  create_supplier_earnings Boolean @default(false)
  delete_supplier_earnings Boolean @default(false)
  view_supplier_earnings   Boolean @default(false)

  //suppier deductions
  create_supplier_deductions Boolean @default(false)
  delete_supplier_deductions Boolean @default(false)
  view_supplier_deductions   Boolean @default(false)

  //supplier schedule permissions
  view_supplier_schedule   Boolean @default(false)
  create_supplier_schedule Boolean @default(false)
  delete_supplier_schedule Boolean @default(false)

  //courses permissions
  view_courses   Boolean @default(false)
  create_courses Boolean @default(false)
  update_courses Boolean @default(false)
  delete_courses Boolean @default(false)

  //orders permissions
  view_orders   Boolean @default(false)
  create_orders Boolean @default(false)
  update_orders Boolean @default(false)
  delete_orders Boolean @default(false)

  //agent permissions
  view_agent                   Boolean @default(false)
  create_agent                 Boolean @default(false)
  update_agent                 Boolean @default(false)
  delete_agent                 Boolean @default(false)
  send_agent_payslip           Boolean @default(false)
  view_agent_payment_request   Boolean @default(false)
  update_agent_payment_request Boolean @default(false)

  //agent earnings
  create_agent_earnings   Boolean @default(false)
  delete_agent_earnings   Boolean @default(false)
  view_agent_earnings     Boolean @default(false)
  //agent deductions
  create_agent_deductions Boolean @default(false)
  delete_agent_deductions Boolean @default(false)
  view_agent_deductions   Boolean @default(false)

  //web news permissions
  view_news   Boolean @default(false)
  create_news Boolean @default(false)
  update_news Boolean @default(false)
  delete_news Boolean @default(false)

  //booking permissions
  view_booking           Boolean @default(false)
  create_booking         Boolean @default(false)
  update_booking         Boolean @default(false)
  delete_booking         Boolean @default(false)
  cancel_booking         Boolean @default(false)
  view_booking_request   Boolean @default(false)
  create_booking_request Boolean @default(false)
  cancel_booking_request Boolean @default(false)
  delete_booking_request Boolean @default(false)

  //booking comments permissions
  view_booking_comments   Boolean @default(false)
  delete_booking_comments Boolean @default(false)

  //booking comments templates
  view_booking_comments_template   Boolean @default(false)
  create_booking_comments_template Boolean @default(false)
  update_booking_comments_template Boolean @default(false)
  delete_booking_comments_template Boolean @default(false)

  //reminders permissions
  view_reminders    Boolean @default(false)
  create_reminders  Boolean @default(false)
  update_reminders  Boolean @default(false)
  delete_reminders  Boolean @default(false)
  confirm_reminders Boolean @default(false)

  //other permissions
  download_table  Boolean @default(false)
  handle_settings Boolean @default(false)
  view_statistics Boolean @default(false)

  department_permission  DepartmentPermission @relation(fields: [departmentPermissionID], references: [id], onDelete: Cascade)
  departmentPermissionID String
  created_at             DateTime             @default(now())
  updated_at             DateTime             @updatedAt

  @@index([departmentPermissionID])
}

model SuperAdmin {
  id         String   @id @default(uuid())
  username   String   @unique
  password   String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Department {
  id                     String                 @id @default(uuid())
  name                   String                 @unique
  created_at             DateTime               @default(now())
  updated_at             DateTime               @updatedAt
  clients                Client[]
  news                   News[]
  agents                 Agent[]
  suppliers              Supplier[]
  admins                 Admin[]
  orders                 Order[]
  bookings               Booking[]
  cards                  ClientCardList[]
  reminders              Reminders[]
  department_permissions DepartmentPermission[]
  booking_requests       BookingRequest[]
}

model News {
  id            String      @id @default(uuid())
  title         String      @db.Text
  author        String
  keywords      Json?
  content       String      @db.Text
  department_id String?
  created_at    DateTime    @default(now())
  updated_at    DateTime    @updatedAt
  department    Department? @relation(fields: [department_id], references: [id], onDelete: Cascade)

  @@index([department_id])
}
