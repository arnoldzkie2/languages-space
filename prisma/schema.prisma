generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// client area

model Client {
  id           String       @id @default(uuid())
  profile_url  String?      @db.Text
  profile_key  String?
  name         String?
  username     String       @unique
  phone_number String?
  email        String?
  gender       String?
  organization String?
  password     String
  address      String?
  origin       Json?
  note         String?
  created_at   DateTime     @default(now())
  updated_at   DateTime     @updatedAt
  departments  Department[]
  orders       Order[]
  cards        ClientCard[]
  bookings     Booking[]
}

model ClientCard {
  id               String         @id @default(uuid())
  name             String
  price            Decimal
  balance          Int
  validity         String
  clientID         String
  invoice          Boolean
  repeat_purchases Boolean
  online_renews    Boolean
  cardID           String
  created_at       DateTime       @default(now())
  updated_at       DateTime       @updatedAt
  client           Client         @relation(fields: [clientID], references: [id], onDelete: Cascade)
  card             ClientCardList @relation(fields: [cardID], references: [id], onDelete: Cascade)

  @@index([clientID])
  @@index([cardID])
}

model ClientCardList {
  id                  String          @id @default(uuid())
  name                String
  sold                Int
  price               Decimal
  balance             Int
  validity            Int
  available           Boolean
  invoice             Boolean
  repeat_purchases    Boolean
  online_renews       Boolean
  productID           String
  productPriceID      String
  created_at          DateTime        @default(now())
  updated_at          DateTime        @updatedAt
  orders              Order[]
  supported_courses   Courses[]
  supported_suppliers SupplierPrice[]
  active              ClientCard[]
  department          Department      @relation(fields: [departmentID], references: [id], onDelete: Cascade)
  departmentID        String

  @@index([departmentID])
}

//supplier area

model Supplier {
  id                String                @id @default(uuid())
  profile_key       String?
  profile_url       String?
  name              String
  username          String                @unique
  organization      String?
  phone_number      String?
  password          String
  email             String?
  address           String?
  gender            String?
  card              Json?
  tags              Json?
  origin            String?
  note              String?
  employment_status String?
  entry             DateTime?
  departure         DateTime?
  created_at        DateTime              @default(now())
  updated_at        DateTime              @updatedAt
  meeting_info      SupplierMeetingInfo[]
  schedule          SupplierSchedule[]
  supplier_price    SupplierPrice[]
  bookings          Booking[]
  departments       Department[]
  balance           SupplierBalance[]
}

model SupplierBalance {
  id               String                        @id @default(uuid())
  amount           Int
  currency         String
  payment_schedule String
  payment_address  String
  salary           Int
  booking_rate     Int
  supplierID       String
  created_at       DateTime                      @default(now())
  updated_at       DateTime                      @updatedAt
  supplier         Supplier                      @relation(fields: [supplierID], references: [id], onDelete: Cascade)
  earnings         SupplierEarnings[]
  deductions       SupplierDeductions[]
  transactions     SupplierBalanceTransactions[]

  @@index([supplierID])
}

model SupplierBalanceTransactions {
  id                String          @id @default(uuid())
  amount            Int
  status            String
  payment_address   String
  paid_by           String?
  operator          String
  created_at        DateTime        @default(now())
  updated_at        DateTime        @updatedAt
  balance           SupplierBalance @relation(fields: [supplierBalanceID], references: [id], onDelete: Cascade)
  supplierBalanceID String

  @@index([supplierBalanceID])
}

model SupplierEarnings {
  id                String          @id @default(uuid())
  name              String
  quantity          Int
  rate              Int
  amount            Int
  created_at        DateTime        @default(now())
  updated_at        DateTime        @updatedAt
  balance           SupplierBalance @relation(fields: [supplierBalanceID], references: [id], onDelete: Cascade)
  supplierBalanceID String

  @@index([supplierBalanceID])
}

model SupplierDeductions {
  id                String          @id @default(uuid())
  name              String
  quantity          Int
  rate              Int
  amount            Int
  created_at        DateTime        @default(now())
  updated_at        DateTime        @updatedAt
  balance           SupplierBalance @relation(fields: [supplierBalanceID], references: [id], onDelete: Cascade)
  supplierBalanceID String

  @@index([supplierBalanceID])
}

model SupplierMeetingInfo {
  id           String   @id @default(uuid())
  service      String
  meeting_code String
  supplierID   String
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
  supplier     Supplier @relation(fields: [supplierID], references: [id], onDelete: Cascade)

  @@index([supplierID])
}

model SupplierSchedule {
  id             String    @id @default(uuid())
  supplierID     String
  date           String
  time           String
  status         String
  clientUsername String?
  clientID       String?
  created_at     DateTime  @default(now())
  updated_at     DateTime  @updatedAt
  supplier       Supplier  @relation(fields: [supplierID], references: [id], onDelete: Cascade)
  booking        Booking[]

  @@index([supplierID])
}

// booking area

model Booking {
  id                String           @id @default(uuid())
  name              String
  operator          String
  status            String
  note              String?
  supplier_rate      Int
  card_balance_cost Int
  supplierID        String
  clientID          String
  card_name         String
  clientCardID      String
  settlement        String
  price             Decimal
  quantity          Decimal
  meeting_info      Json
  created_at        DateTime         @default(now())
  updated_at        DateTime         @updatedAt
  course            Courses          @relation(fields: [courseID], references: [id], onDelete: Cascade)
  schedule          SupplierSchedule @relation(fields: [scheduleID], references: [id], onDelete: Cascade)
  supplier          Supplier         @relation(fields: [supplierID], references: [id], onDelete: Cascade)
  client            Client           @relation(fields: [clientID], references: [id], onDelete: Cascade)
  department        Department       @relation(fields: [departmentID], references: [id])
  courseID          String
  departmentID      String
  scheduleID        String

  @@index([supplierID])
  @@index([clientID])
  @@index([courseID])
  @@index([departmentID])
  @@index([scheduleID])
}

model SupplierPrice {
  id         String         @id @default(uuid())
  price      Int
  supplierID String
  cardID     String
  supplier   Supplier       @relation(fields: [supplierID], references: [id], onDelete: Cascade)
  card       ClientCardList @relation(fields: [cardID], references: [id], onDelete: Cascade)

  @@index([supplierID])
  @@index([cardID])
}

model Courses {
  id              String           @id @default(uuid())
  name            String
  created_at      DateTime         @default(now())
  updated_at      DateTime         @updatedAt
  supported_cards ClientCardList[]
  booking         Booking[]
}

model Reminders {
  id           String      @id @default(uuid())
  name         String
  operator     String
  status       String
  note         String?
  supplierID   String?
  clientID     String?
  departmentID String?
  card_name    String?
  settlement   String?
  clientCardID String?
  courseID     String?
  scheduleID   String?
  price        Int?
  quantity     Decimal
  meeting_info Json?
  department   Department? @relation(fields: [departmentID], references: [id], onDelete: Cascade)
  created_at   DateTime    @default(now())
  updated_at   DateTime    @updatedAt

  @@index([departmentID])
}

// agent area

model Agent {
  id                  String       @id @default(uuid())
  profile_url         String?
  profile_key         String?
  name                String
  username            String       @unique
  password            String
  organization        Json?
  payment_information Json?
  phone_number        String?
  email               String?
  address             String?
  gender              String?
  origin              String
  note                String?
  agentCardID         String?
  created_at          DateTime     @default(now())
  updated_at          DateTime     @updatedAt
  card                AgentCard?   @relation(fields: [agentCardID], references: [id], onDelete: Cascade)
  departments         Department[]

  @@index([agentCardID])
}

model AgentCard {
  id         String   @id @default(uuid())
  type       Json
  name       String
  link       String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  agent      Agent[]
}

// order area

model Order {
  id             String         @id @unique @default(uuid())
  quantity       Int
  price          Decimal
  operator       String
  status         String
  note           String?
  invoice_number String?
  express_number String?
  cardID         String
  clientID       String
  created_at     DateTime       @default(now())
  updated_at     DateTime       @updatedAt
  card           ClientCardList @relation(fields: [cardID], references: [id], onDelete: Cascade)
  client         Client         @relation(fields: [clientID], references: [id], onDelete: Cascade)
  department     Department     @relation(fields: [departmentID], references: [id], onDelete: Cascade)
  departmentID   String

  @@index([clientID])
  @@index([cardID])
  @@index([departmentID])
}

// admin area

model Admin {
  id          String       @id @default(uuid())
  name        String
  username    String       @unique
  email       String
  password    String
  created_at  DateTime     @default(now())
  updated_at  DateTime     @updatedAt
  departments Department[]
}

model SuperAdmin {
  id         String   @id @default(uuid())
  username   String   @unique
  password   String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Department {
  id         String           @id @default(uuid())
  name       String           @unique
  created_at DateTime         @default(now())
  updated_at DateTime         @updatedAt
  clients    Client[]
  news       News[]
  agents     Agent[]
  suppliers  Supplier[]
  admins     Admin[]
  orders     Order[]
  bookings   Booking[]
  cards      ClientCardList[]
  reminders  Reminders[]
}

model News {
  id            String      @id @default(uuid())
  title         String      @db.Text
  author        String
  keywords      Json?
  content       String      @db.Text
  department_id String?
  created_at    DateTime    @default(now())
  updated_at    DateTime    @updatedAt
  department    Department? @relation(fields: [department_id], references: [id], onDelete: Cascade)

  @@index([department_id])
}
