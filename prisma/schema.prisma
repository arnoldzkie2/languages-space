generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// client schema area

model Client {
  id           String             @id @default(uuid())
  profile      String?
  name         String
  user_name    String             @unique
  phone_number String?
  email        String?            @unique
  gender       String?
  card         ClientCard[]
  type         String?
  organization Json?
  password     String
  address      String?
  origin       String?
  tags         Json?
  note         String?
  date         DateTime           @default(now())
  departments  ClientDepartment[]
}

model ClientDepartment {
  id            String     @id @default(uuid())
  client        Client     @relation(fields: [client_id], references: [id])
  client_id     String
  department    Department @relation(fields: [department_id], references: [id])
  department_id String
}

model ClientCard {
  id            String         @id @default(uuid())
  client        Client?        @relation(fields: [client_id], references: [id])
  client_id     String?
  postpaid_card PostpaidCard[]
  prepaid_card  PrepaidCard[]
}

model PostpaidCard {
  id                String      @id @default(uuid())
  price             Int
  settlement_period String
  invoice           Boolean
  client_card       ClientCard? @relation(fields: [client_card_id], references: [id])
  client_card_id    String?
}

model PrepaidCard {
  id               String      @id @default(uuid())
  price            Int
  balance          Int
  invoice          Boolean
  validity         String
  online_purchases Boolean
  online_renews    Boolean
  repeat_purchases Boolean
  client_Card      ClientCard? @relation(fields: [clien_card_id], references: [id])
  clien_card_id    String?
}

// supplier schema area

model Supplier {
  id                  String               @id @default(uuid())
  profile             String?
  name                String
  user_name           String               @unique
  type                String
  organization        Json?
  payment_information Json?
  phone_number        String
  password            String
  email               String               @unique
  address             String
  gender              String
  card                Json?
  origin              String?
  tags                Json
  note                String
  employment_status   String
  entry               DateTime
  departure           DateTime
  date                DateTime             @default(now())
  departments         SupplierDepartment[]
}

model SupplierDepartment {
  id            String     @id @default(uuid())
  supplier      Supplier   @relation(fields: [supplier_id], references: [id])
  supplier_id   String
  department    Department @relation(fields: [department_id], references: [id])
  department_id String
}

model SupplierCard {
  id   String             @id @default(uuid())
  name SupplierCardType[]
  type Json
}

model SupplierCardType {
  id             String        @id @default(uuid())
  SupplierCard   SupplierCard? @relation(fields: [supplierCardId], references: [id])
  supplierCardId String?
  fixed_salary   Json?
  commission     Json?
}

// agent schema area

model Agent {
  id                  String            @id @default(uuid())
  profile             String?
  name                String
  user_name           String            @unique
  password            String
  type                String
  organization        Json?
  payment_information Json?
  phone_number        String
  email               String            @unique
  address             String
  gender              String
  card                Json?
  origin              String
  note                String
  date                DateTime          @default(now())
  departments         AgentDepartment[]
}

model AgentDepartment {
  id            String      @id @default(uuid())
  agent         Agent?      @relation(fields: [agent_id], references: [id])
  agent_id      String?
  department    Department? @relation(fields: [department_id], references: [id])
  department_id String?
}

model AgentCard {
  id   String @id @default(uuid())
  type Json
  name String
  link String
}

// order schema area 

model Order {
  id             String            @id @unique @default(uuid())
  booking_date   DateTime
  name           String
  client_name    String
  card           Json
  quantity       Int
  price          Float
  operator       String
  note           String?
  status         String
  invoice_number Int
  express_number Int
  date           DateTime          @default(now())
  departments    OrderDepartment[]
}

model OrderDepartment {
  id            String      @id @unique @default(uuid())
  order         Order?      @relation(fields: [order_id], references: [id])
  order_id      String?
  department    Department? @relation(fields: [department_id], references: [id])
  department_id String?
}

// admin schema area

model Admin {
  id          String            @id @default(uuid())
  name        String
  user_name   String            @unique
  email       String
  password    String
  date        DateTime          @default(now())
  departments AdminDepartment[]
}

model AdminDepartment {
  id            String      @id @default(uuid())
  admin         Admin?      @relation(fields: [admin_id], references: [id])
  admin_id      String?
  department    Department? @relation(fields: [department_id], references: [id])
  department_id String?
}

model SuperAdmin {
  id        String   @id @default(uuid())
  name      String
  user_name String   @unique
  email     String   @unique
  password  String
  date      DateTime @default(now())
}

// department schema area

model Department {
  id       String               @id @default(uuid())
  name     String               @unique
  client   ClientDepartment[]
  supplier SupplierDepartment[]
  agent    AgentDepartment[]
  admin    AdminDepartment[]
  order    OrderDepartment[]
  date     DateTime             @default(now())
}
