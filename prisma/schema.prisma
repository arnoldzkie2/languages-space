generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Client {
  id           String       @id @default(uuid())
  profile      String?      @db.Text
  name         String
  user_name    String       @unique
  phone_number String?
  email        String?
  gender       String?
  cards        ClientCard[]
  organization String?
  password     String
  address      String?
  origin       Json?
  note         String?
  departments  Department[]
  created_at   DateTime     @default(now())
  updated_at   DateTime     @updatedAt
  orders       Order[]
  bookings     Booking[]
}

model ClientCard {
  id                String    @id @default(uuid())
  name              String
  price             Float
  balance           Int
  validity          String
  client            Client    @relation(fields: [clientID], references: [id], onDelete: Cascade)
  clientID          String
  invoice           Boolean
  repeat_purchases  Boolean
  online_purchases  Boolean
  online_renews     Boolean
  settlement_period String
  cardID            String
  bookings          Booking[]
  created_at        DateTime  @default(now())
  updated_at        DateTime  @updatedAt

  @@index([clientID])
}

model ClientCardList {
  id                  String          @id @default(uuid())
  name                String
  sold                Int
  price               Int
  balance             Int
  validity            Int
  invoice             Boolean
  repeat_purchases    Boolean
  online_purchases    Boolean
  online_renews       Boolean
  settlement_period   String
  productID           String
  productPriceID      String
  created_at          DateTime        @default(now())
  updated_at          DateTime        @updatedAt
  orders              Order[]
  supported_courses   Courses[]
  supported_suppliers SupplierPrice[]
}

model Courses {
  id              String           @id @default(uuid())
  name            String
  created_at      DateTime         @default(now())
  updated_at      DateTime         @updatedAt
  supported_cards ClientCardList[]
}

model Supplier {
  id                String                @id @default(uuid())
  profile           String?
  name              String
  user_name         String                @unique
  organization      String?
  payment_info      String?
  phone_number      String?
  password          String
  email             String?
  address           String?
  gender            String?
  card              Json?
  tags              Json?
  origin            String?
  note              String?
  employment_status String?
  entry             DateTime?
  departure         DateTime?
  created_at        DateTime              @default(now())
  updated_at        DateTime              @updatedAt
  meeting_info      SupplierMeetingInfo[]
  schedule          SupplierSchedule[]
  supplier_price    SupplierPrice[]
  bookings          Booking[]
  departments       Department[]
}

model SupplierPrice {
  id         String         @id @default(uuid())
  price      Int
  supplierID String
  cardID     String
  supplier   Supplier       @relation(fields: [supplierID], references: [id], onDelete: Cascade)
  card       ClientCardList @relation(fields: [cardID], references: [id], onDelete: Cascade)

  @@index([supplierID])
  @@index([cardID])
}

model SupplierMeetingInfo {
  id           String    @id @default(uuid())
  service      String
  meeting_code String
  supplierID   String
  created_at   DateTime  @default(now())
  updated_at   DateTime  @updatedAt
  supplier     Supplier  @relation(fields: [supplierID], references: [id], onDelete: Cascade)
  bookings     Booking[]

  @@index([supplierID])
}

model SupplierSchedule {
  id         String    @id @default(uuid())
  supplierID String
  date       String
  time       String
  reserved   Boolean   @default(false)
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  supplier   Supplier  @relation(fields: [supplierID], references: [id], onDelete: Cascade)
  booking    Booking[]

  @@index([supplierID])
}

model Booking {
  id            String              @id @default(uuid())
  name          String
  operator      String
  status        String
  note          String?
  scheduleID    String
  supplierID    String
  clientID      String
  clientCardID  String
  meetingInfoID String
  created_at    DateTime            @default(now())
  updated_at    DateTime            @updatedAt
  schedule      SupplierSchedule    @relation(fields: [scheduleID], references: [id], onDelete: Cascade)
  supplier      Supplier            @relation(fields: [supplierID], references: [id], onDelete: Cascade)
  client        Client              @relation(fields: [clientID], references: [id], onDelete: Cascade)
  client_card   ClientCard          @relation(fields: [clientCardID], references: [id], onDelete: Cascade)
  meeting_info  SupplierMeetingInfo @relation(fields: [meetingInfoID], references: [id], onDelete: Cascade)
  departments   Department[]

  @@index([scheduleID])
  @@index([supplierID])
  @@index([clientID])
  @@index([clientCardID])
  @@index([meetingInfoID])
}

model Agent {
  id                  String       @id @default(uuid())
  profile             String?
  name                String
  user_name           String       @unique
  password            String
  organization        Json?
  payment_information Json?
  phone_number        String?
  email               String?
  address             String?
  gender              String?
  origin              String
  note                String?
  agentCardID         String?
  created_at          DateTime     @default(now())
  updated_at          DateTime     @updatedAt
  card                AgentCard?   @relation(fields: [agentCardID], references: [id], onDelete: Cascade)
  departments         Department[]

  @@index([agentCardID])
}

model AgentCard {
  id         String   @id @default(uuid())
  type       Json
  name       String
  link       String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  agent      Agent[]
}

model Order {
  id             String         @id @unique @default(uuid())
  quantity       Int
  price          Float
  operator       String
  status         String
  note           String?
  invoice_number String?
  express_number String?
  created        DateTime       @default(now())
  cardID         String
  clientID       String
  created_at     DateTime       @default(now())
  updated_at     DateTime       @updatedAt
  card           ClientCardList @relation(fields: [cardID], references: [id], onDelete: Cascade)
  client         Client         @relation(fields: [clientID], references: [id], onDelete: Cascade)
  departments    Department[]

  @@index([clientID])
  @@index([cardID])
}

model Admin {
  id          String       @id @default(uuid())
  name        String
  user_name   String       @unique
  email       String
  password    String
  created_at  DateTime     @default(now())
  updated_at  DateTime     @updatedAt
  departments Department[]
}

model SuperAdmin {
  id         String   @id @default(uuid())
  user_name  String   @unique
  password   String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Department {
  id         String     @id @default(uuid())
  name       String
  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt
  clients    Client[]
  news       News[]
  agents     Agent[]
  suppliers  Supplier[]
  admins     Admin[]
  orders     Order[]
  bookings   Booking[]
}

model News {
  id            String      @id @default(uuid())
  title         String      @db.Text
  author        String
  keywords      Json?
  content       String      @db.Text
  department_id String?
  created_at    DateTime    @default(now())
  updated_at    DateTime    @updatedAt
  department    Department? @relation(fields: [department_id], references: [id], onDelete: Cascade)

  @@index([department_id])
}
